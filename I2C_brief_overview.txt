I2C Brief Overview

I2C addresses must be unique on the same bus.  Most I2C devices have unique 
addresses legally, but if you are using two of the same piece of hardware, then
you must put them on different I2C buses to avoid communication conflict.

"Starting with restart" vs "starting without restart":
   These are two ways of sending a "start transmission" signal, which is just a 
   falling edge on the signal line.  When you only write data, you send a start 
   signal without restart, which means that all I2C devices on the bus are 
   alerted to the start signal, then the appropriate device is alerted by 
   sending its I2C address (which should be unique on the I2C bus) along with a 
   "write" signal, and then it keeps waiting for data until the "stop" signal 
   is sent, at which point the bus is free to use again.
   This is "starting without restart"

   Some of these I2C function though, like my_I2C_read_device_register(...), or 
   any reading function for that matter, must first send a start signal, then 
   send the I2C address of the device that they need to read along with a 
   "write" signal, then stop the communication but almost immediately start it 
   back up again before any other process or device can grab the bus, then send 
   the I2C address again, this time with a "read" signal.  
   That act of quickly stopping communication and almost immediately starting 
   it back up again before another device can grab the bus is called 
   "starting with restart".  The communication is restarted so fast that no I2C 
   device is fast enough to grab the bus again.






Below is an overview of the I2C handler minus most of the pmod-specific 
functions.  I hope you can see how short most of the code is.  Also notice the
while(...) loops that may not ever exit and all of the function calls that go
unchecked.  This is just asking for trouble if anything goes wrong.


// these are the I2C addresses of the warious daisy chained pmods
#define I2C_ADDR_PMOD_TEMP      0x4B
#define TWI_ADDR_PMOD_CLS       0x48
#define I2C_ADDR_PMOD_ACL       0x1D
#define I2C_ADDR_PMOD_ACL_X0    0x32
#define I2C_ADDR_PMOD_ACL_X1    0x33
#define I2C_ADDR_PMOD_ACL_Y0    0x34
#define I2C_ADDR_PMOD_ACL_Y1    0x35
#define I2C_ADDR_PMOD_ACL_Z0    0x36
#define I2C_ADDR_PMOD_ACL_Z1    0x37
#define I2C_ADDR_PMOD_ACL_PWR   0x2D
#define I2C_ADDR_PMOD_GYRO      0x69    // apparently, SDO is connected to VCC
#define I2C_ADDR_PMOD_GYRO_XL   0x28
#define I2C_ADDR_PMOD_GYRO_XH   0x29
#define I2C_ADDR_PMOD_GYRO_YL   0x2A
#define I2C_ADDR_PMOD_GYRO_YH   0x2B
#define I2C_ADDR_PMOD_GYRO_ZL   0x2C
#define I2C_ADDR_PMOD_GYRO_ZH   0x2D
#define I2C_ADDR_PMOD_GYRO_CTRL_REG1   0x20

#define I2C_FREQ_1KHZ 100000
#define CLS_LINE_SIZE 17


// Globals for setting up pmod CLS
// values in Digilent pmod CLS reference manual, pages 2 - 3
const unsigned char enable_display[] =  {27, '[', '3', 'e', '\0'};
const unsigned char set_cursor[] =      {27, '[', '1', 'c', '\0'};
const unsigned char set_line_one[] =     {27, '[', 'j', '\0'};
const unsigned char wrap_line[] =       {27, '[', '0', 'h', '\0'};
const unsigned char set_line_two[] =    {27, '[', '1', ';', '0', 'H', '\0'};


void I2C_init(I2C_MODULE module_ID)
{
   UINT32 actualClock;
   actualClock = I2CSetFrequency(module_ID, SYSTEM_CLOCK, I2C_FREQ_1KHZ);
   I2CEnable(module_ID, TRUE);
}

void start_transfer(I2C_MODULE module_ID, bool start_with_restart)
{
   unsigned int returnVal;
   I2C_STATUS status;

   while(!I2CBusIsIdle(module_ID));

   if (start_with_restart)
   {
      I2CRestart(module_ID);
   }
   else
   {
      I2CStart(module_ID);
   }
   
   // Wait for the signal to complete
   do
   {
      status = I2CGetStatus(module_ID);
   } while ( !(status & I2C_START) );
}

void stop_transfer(I2C_MODULE module_ID)
{
   I2C_STATUS status;

   I2CStop(module_ID);

   // Wait for the signal to complete
   do
   {
      status = I2CGetStatus(module_ID);
   } while ( !(status & I2C_STOP) );
}

void transmit_one_byte(I2C_MODULE module_ID, UINT8 data)
{
    unsigned int returnVal;

    while(!I2CTransmitterIsReady(module_ID));

    I2CSendByte(module_ID, data);

    // Wait for the transmission to finish
    while(!I2CTransmissionHasCompleted(module_ID));
}

void receive_one_byte(I2C_MODULE module_ID, UINT8 *data)
{
    I2CReceiverEnable(module_ID, TRUE)

    // wait for data to be available, then assign it when it is
    while(!(I2CReceivedDataIsAvailable(module_ID)));
    *data = I2CGetByte(module_ID);
}

void transmit_n_bytes(I2C_MODULE module_ID, char *str, unsigned int bytes_to_send)
{
   unsigned int byte_count;
   unsigned char c;

   byte_count = 0;
   c = *str;
   while(byte_count < bytes_to_send)
   {
      // transmit the bytes
      transmit_one_byte(module_ID, c);
      byte_count++;
      c = *(str + byte_count);
   }
}

void my_I2C_write_to_CLS_line(I2C_MODULE module_ID, char* string, unsigned int lineNum)
{
   I2C_7_BIT_ADDRESS   slave_address;

   while(!start_transfer(false)(module_ID));
   I2C_FORMAT_7_BIT_ADDRESS(slave_address, TWI_ADDR_PMOD_CLS, I2C_WRITE);
   transmit_one_byte(module_ID, slave_address.byte);

   if (2 == lineNum)
   {
      transmit_n_bytes(module_ID, (char*)set_line_two, strlen(set_line_two));
   }
   else
   {
      transmit_n_bytes(module_ID, (char*)set_line_one, strlen(set_line_one));
   }

   transmit_n_bytes(module_ID, string, strlen(string));
   stop_transfer(module_ID);
}


void my_I2C_write_device_register(I2C_MODULE module_ID, unsigned int dev_addr, unsigned int reg_addr, UINT8 data_byte)
{
   I2C_7_BIT_ADDRESS   slave_address;

   while(!start_transfer(false)(module_ID));
   I2C_FORMAT_7_BIT_ADDRESS(slave_address, dev_addr, I2C_WRITE);
   transmit_one_byte(module_ID, slave_address.byte);
   transmit_one_byte(module_ID, reg_addr);
   transmit_one_byte(module_ID, data_byte));

   stop_transfer(module_ID);
}

void my_I2C_read_device_register(I2C_MODULE module_ID, unsigned int dev_addr, unsigned int reg_addr, UINT8 *data_byte)
{
   I2C_7_BIT_ADDRESS   slave_address;

   while(!start_transfer(false)(module_ID));
   I2C_FORMAT_7_BIT_ADDRESS(slave_address, dev_addr, I2C_WRITE);
   transmit_one_byte(module_ID, slave_address.byte);
   transmit_one_byte(module_ID, reg_addr);

   // now read that register
   while(!start_transfer(true)(module_ID));
   I2C_FORMAT_7_BIT_ADDRESS(slave_address, dev_addr, I2C_READ);
   transmit_one_byte(module_ID, slave_address.byte);
   receive_one_byte(module_ID, data_byte);
   stop_transfer(module_ID);
}


